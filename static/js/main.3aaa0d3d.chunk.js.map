{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","title","year","summary","poster","genres","rating","className","src","alt","map","genre","index","key","slice","App","props","state","isLoading","movies","axios","get","data","this","setState","console","log","getMovies","movie","medium_cover_image","splice","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gUA6BeA,MAxBf,YAAmE,EAAnDC,GAAoD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,OAAgBC,GAAS,EAAjBC,OAAiB,EAATD,QACtD,OACI,yBAAKE,UAAU,SACX,yBAAKC,IAAKJ,EAAQK,IAAKR,EAAOA,MAAOA,IACrC,yBAAKM,UAAU,eACX,wBAAIA,UAAU,gBAAgBN,GAC9B,wBAAIM,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBAAiBF,EAAOK,KAAI,SAACC,EAAOC,GAAU,OAAO,wBAAIC,IAAKD,EAAOL,UAAU,gBAAgBI,OAC7G,uBAAGJ,UAAU,kBAAkBJ,EAAQW,MAAM,EAAE,KAA/C,UCiEDC,G,wDA/DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IARVC,MAAQ,CACJC,WAAW,EACXC,OAAQ,IAKO,E,0LAMwBC,IAAMC,IAAI,yD,gBAA5BF,E,EAAdG,KAAOA,KAAOH,OAErBI,KAAKC,SAAS,CAACL,SAAQD,WAAW,IAElCO,QAAQC,IAAI,iBAAkBP,G,gJAI9BI,KAAKI,c,+BAIC,IAAD,EACuBJ,KAAKN,MAA1BC,EADF,EACEA,UAAWC,EADb,EACaA,OAClB,OACI,6BAASZ,UAAU,aACdW,EACM,yBAAKX,UAAU,UACd,0BAAMA,UAAU,gBAAhB,kBAKA,yBAAKA,UAAU,UACVY,EAAOT,KAAI,SAAAkB,GACZ,OAAQ,kBAAC,EAAD,CAAOf,IAAKe,EAAM5B,GACXA,GAAI4B,EAAM5B,GACVC,MAAO2B,EAAM3B,MACbC,KAAM0B,EAAM1B,KACZC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdvB,OAAQsB,EAAMtB,OACdD,OAAQuB,EAAMvB,OAAOyB,OAAO,EAAE,Y,mDA/CvDC,IAAMC,YCIxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3aaa0d3d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\n// Movie  컴포넌트를 만들고 이걸 export해서 app.js 에서 이 컴포넌트를 재사용할 수 있도록 해야함!\nfunction Movie({id, title, year, summary, poster, rating, genres}) {\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title}/>\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <ul className=\"movie__genres\">{genres.map((genre, index) =>{return <li key={index} className=\"genres_genre\">{genre}</li>})}</ul>\n                <p className=\"movie__summary\">{summary.slice(0,140)}...</p>\n            </div>\n        </div>\n    )\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\n\nclass App extends React.Component {\n\n    state = {\n        isLoading: true,\n        movies: []\n    };\n\n    // setState()를 호출할 때 마다, 새로운 state 와함께 render()함수가 호출된다.\n    // 따라서 화면에는 변경된 state 값이 동적으로 보여지게 된다.\n    constructor(props) {\n        super(props);\n    }\n\n    async getMovies() {\n        // api 에서 movie 리스트 가져옴.\n        const {data: {data: {movies}}} = await axios.get('https://yts.mx/api/v2/list_movies.json?sort_by=rating');\n        // api에서 가져온 movie 리스트로 state 데이터를 갱신함.\n        this.setState({movies, isLoading: false});\n\n        console.log(\"getMovies() : \", movies);\n    }\n\n    componentDidMount() {\n        this.getMovies();\n    }\n\n    // React는 react component class의 render 메소드를 자동으로 호출한다.\n    render() {\n        const {isLoading, movies} = this.state; //  이렇게 하면 this.state안에 있는 key isLoading, movies에 해당하는 value가 각각 const변수에 할당된다.\n        return (\n            <section className=\"container\">\n                {isLoading\n                    ? (<div className=\"loader\">\n                        <span className=\"loader__text\">\n                            is Loading...\n                        </span>\n                      </div>)\n                    : (\n                        <div className=\"movies\">\n                            {movies.map(movie => {\n                            return (<Movie key={movie.id}\n                                           id={movie.id}\n                                           title={movie.title}\n                                           year={movie.year}\n                                           summary={movie.summary}\n                                           poster={movie.medium_cover_image}\n                                           rating={movie.rating}\n                                           genres={movie.genres.splice(0,3)}\n                                    />)})}\n                        </div>\n\n                      )\n                }\n            </section>\n        )\n    }\n\n    componentDidUpdate() {\n    }\n\n}\n\n\n// function App() {\n//   return (\n//       <div>\n//           {foodILike.map(food => (<Food key ={food.id} fav={food.name} img={food.img} rating={food.rating} />))}\n//       </div>\n//   )\n// }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\n// <APP /> 은 html이 아니다. react의 component라는 것인데, 이건 html을 반환하는 함수이다.\n// 이런걸 jsx 라고 하는데, jsx는 javascript안의 html이다.\n// 그리고 react application은 한 번에 하 나의 component만 렌더링 할 수 있다.\n// 따라서 모든 컴포넌트들은 App.js 안에 들어가야한다.\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}